BlinkScript {
 recompileCount 18
 ProgramGroup 1
 KernelDescription "2 \"SurfaceDistance\" iterate pixelWise 479eaa4d36329a3cb32ddf1ae9a8e9510be01e8a99bab57be0c29de4e1404a37 2 \"src\" Read Ranged2D \"dst\" Write Point 4 \"Threshold\" Float 1 AAAAPw== \"Radius\" Int 1 ZAAAAA== \"doInside\" Bool 1 AQ== \"doOutside\" Bool 1 AQ== 4 \"threshold\" 1 1 \"radius\" 1 1 \"doInside\" 1 1 \"doOutside\" 1 1 2 \"srcrangeMin\" Int 2 1 AAAAAAAAAAA= \"srcrangeMax\" Int 2 1 AAAAAAAAAAA="
 kernelSource "kernel SurfaceDistance : public ImageComputationKernel<ePixelWise>\n\{\n  Image<eRead, eAccessRanged2D, eEdgeClamped> src;\n  Image<eWrite, eAccessPoint> dst;\n\nparam:\n  float threshold; //Cut off edge value\n  int radius;  //The radius of the edge search\n  bool doInside;\n  bool doOutside;\n\nlocal:\n\n  void define() \{\n    defineParam(radius, \"Radius\", 100); \n    defineParam(threshold, \"Threshold\", 0.5f);\n    defineParam(doInside, \"doInside\", true);\n    defineParam(doOutside, \"doOutside\", true);\n  \}\n\n  void init() \{\n    //Set the range we need to access from the source \n    src.setRange(-radius, -radius, radius, radius);\n  \}\n\n  float sample(int x, int y, bool isdoInside, float threshold)\{\n    float value = src(x, y, 3);\n    bool sampleIsdoInside = true;\n    if(value > threshold)\{\n      sampleIsdoInside = true;\n    \}else\{\n      sampleIsdoInside = false;\n    \}\n\n    if(sampleIsdoInside != isdoInside)\{\n      float2 pos((float)x, (float)y);\n      float sampleDistance = length(pos);\n      return float(sampleDistance);\n    \}\n    return 0.0f;\n  \}\n\n  float around(int layer, bool isdoInside, float threshold)\{\n    float shortestDistance = 0.0f;\n    // top row\n    for(int up = -layer; up <= layer; up++)\{\n      float distance = sample(up, -layer, isdoInside, threshold);\n      if(distance > 0.00000001f)\{\n        if(shortestDistance > 0.00000001f)\{\n          if(distance < shortestDistance)\{\n            shortestDistance = distance;\n          \}\n        \}else\{\n          shortestDistance = distance;\n        \}\n      \}\n    \}\n    // right row\n    for(int right = -layer+1; right <= layer-1; right++)\{\n      float distance = sample(layer, right, isdoInside, threshold);\n      if(distance > 0.00000001f)\{\n        if(shortestDistance > 0.00000001f)\{\n          if(distance < shortestDistance)\{\n            shortestDistance = distance;\n          \}\n        \}else\{\n          shortestDistance = distance;\n        \}\n      \}\n    \}\n    // bottom row\n    for(int down = -layer; down <= layer; down++)\{\n      float distance = sample(down, layer, isdoInside, threshold);\n      if(distance > 0.00000001f)\{\n        if(shortestDistance > 0.00000001f)\{\n          if(distance < shortestDistance)\{\n            shortestDistance = distance;\n          \}\n        \}else\{\n          shortestDistance = distance;\n        \}\n      \}\n    \}\n    // left row\n    for(int left = -layer+1; left <= layer-1; left++)\{\n      float distance = sample(-layer, left, isdoInside, threshold);\n      if(distance > 0.00000001f)\{\n        if(shortestDistance > 0.00000001f)\{\n          if(distance < shortestDistance)\{\n            shortestDistance = distance;\n          \}\n        \}else\{\n          shortestDistance = distance;\n        \}\n      \}\n    \}\n    return shortestDistance;\n  \}\n\n  void process() \{\n    float distance = radius * 1.4f;\n    ValueType(src) value = src(0, 0, 3);\n    bool isdoInside = true;\n    if(value > threshold)\{\n      isdoInside = true;\n    \}else\{\n      isdoInside = false;\n    \}\n\n    if(isdoInside && doInside || !isdoInside && doOutside)\{\n\n      float limit = radius+1;\n      bool changed = false;\n      for(int l = 1; l <= radius+1; l++)\{\n        float dist = around(l, isdoInside, threshold);\n        if(dist > 0.00000001f)\{\n          if(dist < distance)\{\n            distance = dist;\n            if(changed != true)\{\n              // Found within box, end with a radial search\n              float2 diag((float)l, (float)l);\n              float diagLength = length(diag);\n              limit = ceil(float(diagLength));\n            \}\n            changed = true;\n          \}\n        if(l > limit)\{\n          break;\n        \}\n        \}\n      \}\n\n      if(isdoInside)\{\n        distance *= -1;\n      \}\n      if(!changed)\{\n        distance = 0;\n      \}\n      dst() = distance;\n\n    \}\n  \}\n\n\};"
 rebuild ""
 rebuild_finalise ""
 name EdgeDistance
 selected true
}
